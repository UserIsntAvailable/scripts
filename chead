#!/bin/bash

set -euo pipefail

# Prints a Centered HEADer. i.e: the function header bellow.

# Dependencies:
# rev

# -------------------------------- Functions -------------------------------- #

Usage()
{
    while read -r; do
        printf '%s\n' "$REPLY"
    done <<-EOF
Usage: chead [OPTS] TEXT

  -h, --help           - Display this help information.
  -l N, --max-length=N - The max length of the header. (DEFAULT: 80)
  -m, --mirror-start   - If the start header char should be mirror to the end.
  -p, --padding        - If the header elements should be padded with a space.
  -s C, --start=C      - The character(s) that starts the header. (DEFAULT: #)
  -z C, --separator=C  - The character(s) used to separate elements. (DEFAULT: -)

The use of '--' to ignore proceeding options is supported.

Examples:

Default behaviour:
'''
$ chead -- Hello World

#----------------------------------Hello World----------------------------------
'''

Change max length:
'''
$ chead -l 40 'Hello World'

#--------------Hello World--------------
'''

Mirror the start character:
'''
$ chead -m 'Hello World'

#---------------------------------Hello World---------------------------------#
'''

Include padding between header elements:
'''
$ chead -p 'Hello World'

# -------------------------------- Hello World --------------------------------
'''

Change the start or separator character(s):
'''
$ chead -s '|' -z = 'Hello World'

|==================================Hello World==================================
'''
	EOF
}

Err()
{
    printf "Err: %s\n" "$2" 1>&2
    # shellcheck disable=2086
    (($1 > 0)) && exit $1
}

IsDigit()
{
    [[ $2 =~ ^[[:digit:]]+$ ]] || Err 1 "Option '$1' requires an positive integer."
}

# ----------------------------- Input Processing ----------------------------- #

(($# == 0)) && Err 1 "Argument(s) required."

MirrorStart=false
MaxLength=80
Margin=false
SeparatorChar="-"
StartChar="#"

while [[ -n $1 ]]; do
    case $1 in
        --) break ;;
        --help | -h)
            Usage
            exit 0
            ;;

        --mirror-start | -m) MirrorStart=true ;;

        --max-length=*)
            IsDigit "${1%%=*}" "${1#*=}"
            MaxLength=${1#*=}
            ;;
        -l)
            IsDigit "$1" "$2"
            MaxLength=$2
            shift
            ;;

        --padding | -p) Margin=true ;;

        --start=*) StartChar="${1#*=}" ;;
        -s)
            StartChar="$2"
            shift
            ;;

        --separator=*) SeparatorChar="${1#*=}" ;;
        -z)
            SeparatorChar="$2"
            shift
            ;;

        -*) Err 1 "Incorrect option(s) specified." ;;
        *) break ;;
    esac
    shift
done

[[ -z $SeparatorChar ]] && Err 1 "The character used as separator cannot be empty."

HeaderText=$1

[[ -z $HeaderText ]] && Err 1 "Header TEXT is required."

if [[ $Margin == true ]]; then
    StartChar="$StartChar "
    HeaderText=" $HeaderText "
fi

StartCharCount=${#StartChar}

if [[ $MirrorStart == true ]]; then
    StartCharCount=$((${#StartChar} * 2))
fi

# TODO: Add better error message ( include the actual elements ).
((${#HeaderText} + StartCharCount + ${#SeparatorChar} * 2 > MaxLength)) \
    && Err 1 "The combination of all elements is higher than '$MaxLength'"

# ----------------------------------- Main ----------------------------------- #

SeparatorLength=$((MaxLength - ${#HeaderText} - ${#StartChar}))

if [[ $MirrorStart == true ]]; then
    SeparatorLength=$((SeparatorLength - ${#StartChar}))
fi

SeparatorLength=$((SeparatorLength / 2 / ${#SeparatorChar} - 1))

for ((I = 0; I <= SeparatorLength; I++)); do
    Separator+="$SeparatorChar"
done

printf -v Result "%s%s%s%s" "$StartChar" "$Separator" "$HeaderText" "$Separator"

# TODO: Rename MAX_LENGTH to TARGET_LENGTH, and if string doesn't equal to
# TARGET_LENGTH, repeat 'PADDING' until 'Result' >= TARGET_LENGTH, then
# truncate it if bigger. I could also just add a new flag to achieve that
# instead, and keep both behaviours.

if [[ $MirrorStart == true ]]; then
    printf "%s%s\n" "$Result" "$(rev <<<"$StartChar")"
else
    echo "$Result"
fi
